package de.spaghetto.dnasequencer

import de.spaghetto.dnasequencer.domain.model.entity.DnaSequence
import de.spaghetto.dnasequencer.domain.service.*
import org.junit.jupiter.api.Test
import org.mockito.Mock

internal class SequencerServiceTest {

    @Mock
    private val fullMatch = GetFullMatch()

    @Mock
    private val oneMismatch = GetOneMismatch()

    @Mock
    private val doubleMismatch = GetDoubleMismatch()

    @Mock
    private val deletionMatch = GetDeletionMatch()



    //private val dnaRepository: DnaRepository = mockk(relaxed = true)
    private val sequencerService = SequencerService(fullMatch, oneMismatch, doubleMismatch, deletionMatch)

    val mainSequence = DnaSequence("A*11:01", "CAAGAGCAGAGGGGTCAGGGCGAAGTCCCAGGGCCCCAGGCGTGGCTCTCAGGGTCTCAGGCCCCGAAGGCGGTGTATGGATTGGGGAGTCCCAGCCTTGGGGATTCCCCAACTCCGCAGTTTCTTTTCTCCCTCTCCCAACCTACGTAGGGTCCTTCATCCTGGATACTCACGACGCGGACCCAGTTCTCACTCCCATTGGGTGTCGGGTTTCCAGAGAAGCCAATCAGTGTCTTCGCGGTCGCTCTTCTAAAGTCCGCACGCACCCACCGGGACTCAGATTCTCCCCAGACCCCGAGGATGGCCGTCATGGCGCCCCGAACCCTCCTCCTGCTACTCTCGGGGGCCCTGGCCCTGACCCAGACCTGGGCGGGTGAGTGCGGGGTCGGGAGGGAAACCGCCTCTGCGGGGAGAAGCAAGGGGCCCTCCTGGCGGGGGCGCAGGACCGGGGGAGCCGCGCCGGGAGGAGGGTCGGGCAGGTCTCAGCCACTGCTCGCCCCCAGGCTCCCACTCCATGAGGTATTTCTACACCTCCGTGTCCCGGCCCGGCCGCGGGGAGCCCCGCTTCATCGCCGTGGGCTACGTGGACGACACGCAGTTCGTGCGGTTCGACAGCGACGCCGCGAGCCAGAGGATGGAGCCGCGGGCGCCGTGGATAGAGCAGGAGGGGCCGGAGTATTGGGACCAGGAGACACGGAATGTGAAGGCCCAGTCACAGACTGACCGAGTGGACCTGGGGACCCTGCGCGGCTACTACAACCAGAGCGAGGACGGTGAGTGACCCCGGCCCGGGGCGCAGGTCACGACCCCTCATCCCCCACGGACGGGCCAGGTGGCCCACAGTCTCCGGGTCCGAGATCCACCCCGAAGCCGCGGGACCCCGAGACCCTTGCCCCGGGAGAGGCCCAGGCGCCTTTACCCGGTTTCATTTTCAGTTTAGGCCAAAAATCCCCCCGGGTTGGTCGGGGCCGGGCAGGGCTTGGGGGACTGGGCTGACCGCGGGGTCGGGGCCAGGTTCTCACACCATCCAGATAATGTATGGCTGCGACGTGGGGCCGGACGGGCGCTTCCTCCGCGGGTACCGGCAGGACGCCTACGACGGCAAGGATTACATCGCCCTGAACGAGGACCTGCGCTCTTGGACCGCGGCGGACATGGCAGCTCAGATCACCAAGCGCAAGTGGGAGGCGGCCCATGCGGCGGAGCAGCAGAGAGCCTACCTGGAGGGCCGGTGCGTGGAGTGGCTCCGCAGATACCTGGAGAACGGGAAGGAGACGCTGCAGCGCACGGGTACCAGGGGCCACGGGGCGCCTCCCTGATCGCCTATAGATCTCCCGGGCTGGCCTCCCACAAGGAGGGGAGACAATTGGGACCAACACTAGAATATCACCCTCCCTCTGGTCCTGAGGGAGAGGAATCCTCCTGGGTTTCCAGATCCTGTACCAGAGAGTGACTCTGAGGTTCCGCCCTGCTCTCTGACACAATTAAGGGATAAAATCTCTGAAGGAGTGACGGGAAGACGATCCCTCGAATACTGATGAGTGGTTCCCTTTGACACCGGCAGCAGCCTTGGGCCCGTGACTTTTCCTCTCAGGCCTTGTTCTCTGCTTCACACTCAATGTGTGTGGGGGTCTGAGTCCAGCACTTCTGAGTCTCTCAGCCTCCACTCAGGTCAGGACCAGAAGTCGCTGTTCCCTTCTCAGGGAATAGAAGATTATCCCAGGTGCCTGTGTCCAGGCTGGTGTCTGGGTTCTGTGCTCTCTTCCCCATCCCGGGTGTCCTGTCCATTCTCAAGATGGCCACATGCGTGCTGGTGGAGTGTCCCATGACAGATGCAAAATGCCTGAATTTTCTGACTCTTCCCGTCAGACCCCCCCAAGACACATATGACCCACCACCCCATCTCTGACCATGAGGCCACCCTGAGGTGCTGGGCCCTGGGCTTCTACCCTGCGGAGATCACACTGACCTGGCAGCGGGATGGGGAGGACCAGACCCAGGACACGGAGCTCGTGGAGACCAGGCCTGCAGGGGATGGAACCTTCCAGAAGTGGGCGGCTGTGGTGGTGCCTTCTGGAGAGGAGCAGAGATACACCTGCCATGTGCAGCATGAGGGTCTGCCCAAGCCCCTCACCCTGAGATGGGGTAAGGAGGGAGATGGGGGTGTCATGTCTCTTAGGGAAAGCAGGAGCCTCTCTGGAGACCTTTAGCAGGGTCAGGGCCCCTCACCTTCCCCTCTTTTCCCAGAGCTGTCTTCCCAGCCCACCATCCCCATCGTGGGCATCATTGCTGGCCTGGTTCTCCTTGGAGCTGTGATCACTGGAGCTGTGGTCGCTGCCGTGATGTGGAGGAGGAAGAGCTCAGGTGGAGAAGGGGTGAAAGGTGGGGTCTGAGATTTCTTGTCTCACTGAGGGTTCCAAGCCCCAGCTAGAAATGTGCCCTGTCTCATTACTGGGAAGCACCTTCCACAATCATGGGCCGACCCAGCCTGGGCCCTGTGTGCCAGCACTTACTCTTTTGTAAAGCACCTGTTAAAATGAAGGACAGATTTATCACCTTGATTACGGCGGTGATGGGACCTGATACCAGCAGTCACAAGTCACAGGGGAAGGTCCCTGAGGACAGACCTCAGGAGGGCTATTGGTCCAGGACCCACACCTGCTTTCTTCATGTTTCCTGATCCCGCCCTGGGTCTGCAGTCACACATTTCTGGAAACTTCTCTGGGGTCCAAGACTAGGAGGTTCCTCTAGGACCTTAAGGCCCTGGCTCCTTTCTGGTATCTCACAGGACATTTTCTTCCCACAGATAGAAAAGGAGGGAGTTACACTCAGGCTGCAAGTAAGTATGAAGGAGGCTGATGCCTGAGGTCCTTGGGATATTGTGTTTGGGAGCCCATGGGGGAGCTCACCCACCCCACAATTCCTCCTCTAGCCACATCTTCTGTGGGATCTGACCAGGTTCTGTTTTTGTTCTACCCCAGGCAGTGACAGTGCCCAGGGCTCTGATGTGTCTCTCACAGCTTGTAAAGGTGAGAGCTTGGAGGGCCTGATGTGTGTTGGGTGTTGGGCGGAACAGTGGACACAGCTGTGCTATGGGGTTTCTTTGCATTGGATGTATTGAGCATGCGATGGGCTGTTTAAGGTGTGACCCCTCACTGTGATGGATATGAATTTGTTCATGAATATTTTTTTCTATAGTGTGAGACAGCTGCCTTGTGTGGGACTGAGAGGCAAGAGTTGTTCCTGCCCTTCCCTTTGTGACTTGAAGAACCCTGACTTTGTTTCTGCAAAGGCACCTGCATGTGTCTGTGTTCGTGTAGGCATAATGTGAGGAGGTGGGGAGACCACCCCACCCCGATGTCCACCATGACCCTCTTCCCACGCTGACCTGTGCTCCCTCTCCAATCATCTTTCCTGTTCCAGAGAGGTGGGGCTGAGGTGTCTCCATCTCTGTCTCAACTTCATGGTGCACTGAGCTGTAACTTCTTCCTTCCCTATTAAAA")
    val mainReverseComplementary = ""


    fun `save returns saved object`() {
        val dnaSequence = DnaSequence("seq","GAC")
        //every { dnaRepository.save(any()) } returns (DnaSequence("seq","GAC"))

        //val returns = sequencerService.addDnaSequence(dnaSequence)
        //assert(returns.sequence == "GAC")
    }

    @Test
    fun `invert sequence`() {
        val dnaSequence = DnaSequence("seq", "TACGCATACTACGT")
        val reverseComplementary = "ACGTAGTATGCGTA"

        val result = sequencerService.invertSequence(dnaSequence)
        println(result)
        assert(result == reverseComplementary)
    }

    @Test
    fun `find two hits`() {
        val dnaSequence = DnaSequence("seq", "TACGCATTACGT")
        val guideRna = "GTA"

        val result = sequencerService.checkFullMatches(dnaSequence, guideRna)
        println(result)
        assert(result == 2)
    }

    @Test
    fun `find overlapping hits`() {
        val dnaSequence = DnaSequence("seq", "CTACGCACTACTACGT")
        val guideRna = "GTAG"
        println(sequencerService.invertSequence(dnaSequence))

        val result = sequencerService.checkFullMatches(dnaSequence, guideRna)
        println(result)
        assert(result == 3)
    }

    @Test
    fun `find single mismatch`() {
        val dnaSequence = DnaSequence("seq", "CTACGCACTACTACGT")
        val guideRna = "TAGGAG"
        println(sequencerService.invertSequence(dnaSequence))

        val result = sequencerService.checkOneMismatch(dnaSequence, guideRna)
        println(result)
        assert(result.size == 1)
    }

    @Test
    fun `find two single mismatch`() {
        val dnaSequence = DnaSequence("seq", "CTACGCACTACTACGT")
        val guideRna = "AGTC"
        println(sequencerService.invertSequence(dnaSequence))

        val result = sequencerService.checkOneMismatch(dnaSequence, guideRna)
        println(result)
        assert(result.size == 2)
    }

    @Test
    fun `exclude total match from single mismatch`() {
        val dnaSequence = DnaSequence("seq", "CTACGCACTACTACGT")
        val guideRna = "AGTG"
        println(sequencerService.invertSequence(dnaSequence))

        val result = sequencerService.checkOneMismatch(dnaSequence, guideRna)
        println(result)
        assert(result.size == 1)
    }


    @Test
    fun `find double mismatch`() {
        val dnaSequence = DnaSequence("seq", "CTACGCACTACTACGT")
        val guideRna = "TATGAG"
        println(sequencerService.invertSequence(dnaSequence))

        val result = sequencerService.checkDoubleMismatch(dnaSequence, guideRna)
        println(result)
        assert(result.size == 1)
    }

    @Test
    fun `deletion match`() {
        val dnaSequence = DnaSequence("seq", "TACGCATACTACGT")
        val guideRna = "TAGCTAT"
        println(sequencerService.invertSequence(dnaSequence))

        val result = sequencerService.checkDeletionMatch(dnaSequence, guideRna)
        println(result)
        assert(result.size == 1)
    }

}